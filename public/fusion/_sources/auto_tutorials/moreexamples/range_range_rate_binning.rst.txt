
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/moreexamples/range_range_rate_binning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_moreexamples_range_range_rate_binning.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_moreexamples_range_range_rate_binning.py:


RangeRangeRateBinning measurement model example
===============================================
:class:`~.RangeRangeRateBinning` is a Cartesian to spherical measurement model. It takes a 6D
state of position and velocity in 3D Cartesian space and produces a 4D state of elevation
(:math:`\theta`),  bearing (:math:`\phi`), range (:math:`r`) and range-rate (:math:`\dot{r}`),

.. math::
      \vec{y}_t = \begin{bmatrix}
                \theta \\
                \phi \\
                r \\
                \dot{r}
            \end{bmatrix}

This example demonstrates the RangeRangeRateBinning measurement model, showing the effect of
binning

.. GENERATED FROM PYTHON SOURCE LINES 21-47

.. code-block:: default


    import numpy as np
    from matplotlib import pyplot as plt
    import datetime


    # show and plot_states will help plot the results of RangeRangeRateBinning

    def show(title='', x_label='', y_label=''):
        plt.minorticks_on()
        plt.grid(which='minor', alpha=0.2)
        plt.grid(which='major')
        plt.title(title, fontsize=15)
        plt.xlabel(x_label, fontsize=15)
        plt.ylabel(y_label, fontsize=15)
        plt.show()


    def plot_states(state_vectors, mapping, plot=plt.plot, line='+-'):
        array = np.zeros([len(state_vectors), len(mapping)])
        for state_vector, index in zip(state_vectors, range(0, len(state_vectors))):
            for j in range(0, len(mapping)):
                array[index, j] = state_vector[mapping[j]]
        plot(array[:, 0], array[:, 1], line)









.. GENERATED FROM PYTHON SOURCE LINES 48-52

Measurement model
-----------------
A measurement model is made with covariance of zero so
that the effects of binning are more obvious.

.. GENERATED FROM PYTHON SOURCE LINES 52-62

.. code-block:: default


    from smartfusion.models.measurement.nonlinear import RangeRangeRateBinning
    measurement_model = RangeRangeRateBinning(
        range_res=3,
        range_rate_res=1,
        ndim_state=6,
        mapping=[0, 2, 4],
        velocity_mapping=[1, 3, 5],
        noise_covar=np.array([0., 0., 0., 0.]))








.. GENERATED FROM PYTHON SOURCE LINES 63-66

Create target
-------------
Then a target is created for the model to measure

.. GENERATED FROM PYTHON SOURCE LINES 66-84

.. code-block:: default

    from smartfusion.models.transition.linear import (CombinedLinearGaussianTransitionModel,
                                                    ConstantVelocity)
    from smartfusion.platform.base import MovingPlatform
    from smartfusion.types.state import State

    time_step = datetime.timedelta(seconds=0.1)
    time_init = datetime.datetime.now()

    transition_model = CombinedLinearGaussianTransitionModel(
        [ConstantVelocity(1.),
         ConstantVelocity(1.),
         ConstantVelocity(1.)])

    red = MovingPlatform(
        position_mapping=[0, 2, 4],
        velocity_mapping=[0, 2, 4],
        states=State([50., 0., -50., 10., 0., 0.], timestamp=time_init),
        transition_model=transition_model)







.. GENERATED FROM PYTHON SOURCE LINES 85-86

Move target

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: default


    for s in range(1, 100):
        red.move(time_init+s*time_step)








.. GENERATED FROM PYTHON SOURCE LINES 91-94

Measure target states
^^^^^^^^^^^^^^^^^^^^^
The states are measured with and without noise to show the real position with the measured one.

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: default


    measurements = []
    noiseless_measurements = []
    for state in red.states:
        measurements.append(measurement_model.function(state, noise=True))
        noiseless_measurements.append(measurement_model.function(state, noise=False))








.. GENERATED FROM PYTHON SOURCE LINES 102-104

Plot results
^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 104-117

.. code-block:: default


    fig = plt.figure(figsize=[10, 10])
    ax = fig.add_subplot(111, polar=True)
    ax.set_thetamin(-60)
    ax.set_thetamax(60)
    ax.set_theta_zero_location('W', offset=-90)
    plot_states(noiseless_measurements, [1, 2], plt.polar, 'r')
    plot_states(measurements, [1, 2], plt.polar)
    plt.legend(["real", "measured"])
    plt.minorticks_on()
    plt.title('Positions')
    plt.grid(which='minor', alpha=0.2)
    plt.show()



.. image-sg:: /auto_tutorials/moreexamples/images/sphx_glr_range_range_rate_binning_001.png
   :alt: Positions
   :srcset: /auto_tutorials/moreexamples/images/sphx_glr_range_range_rate_binning_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-120

This graph shows the radial position is discrete.
Next the velocity is plotted, showing the same binning but affecting the range rate

.. GENERATED FROM PYTHON SOURCE LINES 120-132

.. code-block:: default


    velocities = []
    noiseless_velocities = []
    for state_vector, noiseless in zip(measurements, noiseless_measurements):
        velocities.append(state_vector[3])
        noiseless_velocities.append(noiseless[3])

    plt.figure(figsize=[10, 5])
    plt.plot(np.arange(0, 100)*0.1, noiseless_velocities, 'r')
    plt.plot(np.arange(0, 100)*0.1, velocities, '+-')
    plt.legend(["real", "measured"])
    show(x_label='time (s)', y_label='range rate (m/s)')



.. image-sg:: /auto_tutorials/moreexamples/images/sphx_glr_range_range_rate_binning_002.png
   :alt: range range rate binning
   :srcset: /auto_tutorials/moreexamples/images/sphx_glr_range_range_rate_binning_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.441 seconds)


.. _sphx_glr_download_auto_tutorials_moreexamples_range_range_rate_binning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/claycurry34/Smart-Fusion/main?filepath=notebooks/auto_tutorials/moreexamples/range_range_rate_binning.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: range_range_rate_binning.py <range_range_rate_binning.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: range_range_rate_binning.ipynb <range_range_rate_binning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
